/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package schema;  
@SuppressWarnings("all")
/** Individual File */
@org.apache.avro.specific.AvroGenerated
public class Revision extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Revision\",\"namespace\":\"schema\",\"doc\":\"Individual File\",\"fields\":[{\"name\":\"change\",\"type\":\"int\",\"doc\":\"Change that created this revision\"},{\"name\":\"filename\",\"type\":\"string\",\"doc\":\"Filename\"},{\"name\":\"revision\",\"type\":\"int\",\"doc\":\"The revision of the file\"},{\"name\":\"action\",\"type\":\"string\",\"doc\":\"The action that created this revision\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Change that created this revision */
  @Deprecated public int change;
  /** Filename */
  @Deprecated public java.lang.CharSequence filename;
  /** The revision of the file */
  @Deprecated public int revision;
  /** The action that created this revision */
  @Deprecated public java.lang.CharSequence action;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Revision() {}

  /**
   * All-args constructor.
   */
  public Revision(java.lang.Integer change, java.lang.CharSequence filename, java.lang.Integer revision, java.lang.CharSequence action) {
    this.change = change;
    this.filename = filename;
    this.revision = revision;
    this.action = action;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return change;
    case 1: return filename;
    case 2: return revision;
    case 3: return action;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: change = (java.lang.Integer)value$; break;
    case 1: filename = (java.lang.CharSequence)value$; break;
    case 2: revision = (java.lang.Integer)value$; break;
    case 3: action = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'change' field.
   * Change that created this revision   */
  public java.lang.Integer getChange() {
    return change;
  }

  /**
   * Sets the value of the 'change' field.
   * Change that created this revision   * @param value the value to set.
   */
  public void setChange(java.lang.Integer value) {
    this.change = value;
  }

  /**
   * Gets the value of the 'filename' field.
   * Filename   */
  public java.lang.CharSequence getFilename() {
    return filename;
  }

  /**
   * Sets the value of the 'filename' field.
   * Filename   * @param value the value to set.
   */
  public void setFilename(java.lang.CharSequence value) {
    this.filename = value;
  }

  /**
   * Gets the value of the 'revision' field.
   * The revision of the file   */
  public java.lang.Integer getRevision() {
    return revision;
  }

  /**
   * Sets the value of the 'revision' field.
   * The revision of the file   * @param value the value to set.
   */
  public void setRevision(java.lang.Integer value) {
    this.revision = value;
  }

  /**
   * Gets the value of the 'action' field.
   * The action that created this revision   */
  public java.lang.CharSequence getAction() {
    return action;
  }

  /**
   * Sets the value of the 'action' field.
   * The action that created this revision   * @param value the value to set.
   */
  public void setAction(java.lang.CharSequence value) {
    this.action = value;
  }

  /** Creates a new Revision RecordBuilder */
  public static schema.Revision.Builder newBuilder() {
    return new schema.Revision.Builder();
  }
  
  /** Creates a new Revision RecordBuilder by copying an existing Builder */
  public static schema.Revision.Builder newBuilder(schema.Revision.Builder other) {
    return new schema.Revision.Builder(other);
  }
  
  /** Creates a new Revision RecordBuilder by copying an existing Revision instance */
  public static schema.Revision.Builder newBuilder(schema.Revision other) {
    return new schema.Revision.Builder(other);
  }
  
  /**
   * RecordBuilder for Revision instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Revision>
    implements org.apache.avro.data.RecordBuilder<Revision> {

    private int change;
    private java.lang.CharSequence filename;
    private int revision;
    private java.lang.CharSequence action;

    /** Creates a new Builder */
    private Builder() {
      super(schema.Revision.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(schema.Revision.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.change)) {
        this.change = data().deepCopy(fields()[0].schema(), other.change);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filename)) {
        this.filename = data().deepCopy(fields()[1].schema(), other.filename);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.revision)) {
        this.revision = data().deepCopy(fields()[2].schema(), other.revision);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.action)) {
        this.action = data().deepCopy(fields()[3].schema(), other.action);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Revision instance */
    private Builder(schema.Revision other) {
            super(schema.Revision.SCHEMA$);
      if (isValidValue(fields()[0], other.change)) {
        this.change = data().deepCopy(fields()[0].schema(), other.change);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filename)) {
        this.filename = data().deepCopy(fields()[1].schema(), other.filename);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.revision)) {
        this.revision = data().deepCopy(fields()[2].schema(), other.revision);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.action)) {
        this.action = data().deepCopy(fields()[3].schema(), other.action);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'change' field */
    public java.lang.Integer getChange() {
      return change;
    }
    
    /** Sets the value of the 'change' field */
    public schema.Revision.Builder setChange(int value) {
      validate(fields()[0], value);
      this.change = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'change' field has been set */
    public boolean hasChange() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'change' field */
    public schema.Revision.Builder clearChange() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'filename' field */
    public java.lang.CharSequence getFilename() {
      return filename;
    }
    
    /** Sets the value of the 'filename' field */
    public schema.Revision.Builder setFilename(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.filename = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'filename' field has been set */
    public boolean hasFilename() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'filename' field */
    public schema.Revision.Builder clearFilename() {
      filename = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'revision' field */
    public java.lang.Integer getRevision() {
      return revision;
    }
    
    /** Sets the value of the 'revision' field */
    public schema.Revision.Builder setRevision(int value) {
      validate(fields()[2], value);
      this.revision = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'revision' field has been set */
    public boolean hasRevision() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'revision' field */
    public schema.Revision.Builder clearRevision() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'action' field */
    public java.lang.CharSequence getAction() {
      return action;
    }
    
    /** Sets the value of the 'action' field */
    public schema.Revision.Builder setAction(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.action = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'action' field has been set */
    public boolean hasAction() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'action' field */
    public schema.Revision.Builder clearAction() {
      action = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Revision build() {
      try {
        Revision record = new Revision();
        record.change = fieldSetFlags()[0] ? this.change : (java.lang.Integer) defaultValue(fields()[0]);
        record.filename = fieldSetFlags()[1] ? this.filename : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.revision = fieldSetFlags()[2] ? this.revision : (java.lang.Integer) defaultValue(fields()[2]);
        record.action = fieldSetFlags()[3] ? this.action : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
