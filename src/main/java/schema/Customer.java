/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package schema;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"schema\",\"fields\":[{\"name\":\"customerId\",\"type\":\"int\",\"doc\":\"Identifier for reference\"},{\"name\":\"firstName\",\"type\":\"string\",\"doc\":\"First Name of user\"},{\"name\":\"lastName\",\"type\":\"string\",\"doc\":\"Last name of user\"},{\"name\":\"email\",\"type\":\"string\",\"doc\":\"Email address of user\"},{\"name\":\"update\",\"type\":\"string\",\"doc\":\"Update timestamp (as a string)\"},{\"name\":\"epoch\",\"type\":\"int\",\"doc\":\"How often has this user been updated?\"}],\"doc:\":\"Schema of user\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Identifier for reference */
  @Deprecated public int customerId;
  /** First Name of user */
  @Deprecated public java.lang.CharSequence firstName;
  /** Last name of user */
  @Deprecated public java.lang.CharSequence lastName;
  /** Email address of user */
  @Deprecated public java.lang.CharSequence email;
  /** Update timestamp (as a string) */
  @Deprecated public java.lang.CharSequence update;
  /** How often has this user been updated? */
  @Deprecated public int epoch;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Customer() {}

  /**
   * All-args constructor.
   */
  public Customer(java.lang.Integer customerId, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence email, java.lang.CharSequence update, java.lang.Integer epoch) {
    this.customerId = customerId;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.update = update;
    this.epoch = epoch;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return firstName;
    case 2: return lastName;
    case 3: return email;
    case 4: return update;
    case 5: return epoch;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.Integer)value$; break;
    case 1: firstName = (java.lang.CharSequence)value$; break;
    case 2: lastName = (java.lang.CharSequence)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    case 4: update = (java.lang.CharSequence)value$; break;
    case 5: epoch = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * Identifier for reference   */
  public java.lang.Integer getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * Identifier for reference   * @param value the value to set.
   */
  public void setCustomerId(java.lang.Integer value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * First Name of user   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * First Name of user   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * Last name of user   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * Last name of user   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'email' field.
   * Email address of user   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * Email address of user   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'update' field.
   * Update timestamp (as a string)   */
  public java.lang.CharSequence getUpdate() {
    return update;
  }

  /**
   * Sets the value of the 'update' field.
   * Update timestamp (as a string)   * @param value the value to set.
   */
  public void setUpdate(java.lang.CharSequence value) {
    this.update = value;
  }

  /**
   * Gets the value of the 'epoch' field.
   * How often has this user been updated?   */
  public java.lang.Integer getEpoch() {
    return epoch;
  }

  /**
   * Sets the value of the 'epoch' field.
   * How often has this user been updated?   * @param value the value to set.
   */
  public void setEpoch(java.lang.Integer value) {
    this.epoch = value;
  }

  /** Creates a new Customer RecordBuilder */
  public static schema.Customer.Builder newBuilder() {
    return new schema.Customer.Builder();
  }
  
  /** Creates a new Customer RecordBuilder by copying an existing Builder */
  public static schema.Customer.Builder newBuilder(schema.Customer.Builder other) {
    return new schema.Customer.Builder(other);
  }
  
  /** Creates a new Customer RecordBuilder by copying an existing Customer instance */
  public static schema.Customer.Builder newBuilder(schema.Customer other) {
    return new schema.Customer.Builder(other);
  }
  
  /**
   * RecordBuilder for Customer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    private int customerId;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private java.lang.CharSequence email;
    private java.lang.CharSequence update;
    private int epoch;

    /** Creates a new Builder */
    private Builder() {
      super(schema.Customer.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(schema.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.update)) {
        this.update = data().deepCopy(fields()[4].schema(), other.update);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.epoch)) {
        this.epoch = data().deepCopy(fields()[5].schema(), other.epoch);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Customer instance */
    private Builder(schema.Customer other) {
            super(schema.Customer.SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.update)) {
        this.update = data().deepCopy(fields()[4].schema(), other.update);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.epoch)) {
        this.epoch = data().deepCopy(fields()[5].schema(), other.epoch);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'customerId' field */
    public java.lang.Integer getCustomerId() {
      return customerId;
    }
    
    /** Sets the value of the 'customerId' field */
    public schema.Customer.Builder setCustomerId(int value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'customerId' field has been set */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'customerId' field */
    public schema.Customer.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'firstName' field */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }
    
    /** Sets the value of the 'firstName' field */
    public schema.Customer.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'firstName' field has been set */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'firstName' field */
    public schema.Customer.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lastName' field */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }
    
    /** Sets the value of the 'lastName' field */
    public schema.Customer.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lastName' field has been set */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lastName' field */
    public schema.Customer.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'email' field */
    public java.lang.CharSequence getEmail() {
      return email;
    }
    
    /** Sets the value of the 'email' field */
    public schema.Customer.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'email' field has been set */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'email' field */
    public schema.Customer.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'update' field */
    public java.lang.CharSequence getUpdate() {
      return update;
    }
    
    /** Sets the value of the 'update' field */
    public schema.Customer.Builder setUpdate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.update = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'update' field has been set */
    public boolean hasUpdate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'update' field */
    public schema.Customer.Builder clearUpdate() {
      update = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'epoch' field */
    public java.lang.Integer getEpoch() {
      return epoch;
    }
    
    /** Sets the value of the 'epoch' field */
    public schema.Customer.Builder setEpoch(int value) {
      validate(fields()[5], value);
      this.epoch = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'epoch' field has been set */
    public boolean hasEpoch() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'epoch' field */
    public schema.Customer.Builder clearEpoch() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Customer build() {
      try {
        Customer record = new Customer();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.update = fieldSetFlags()[4] ? this.update : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.epoch = fieldSetFlags()[5] ? this.epoch : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
