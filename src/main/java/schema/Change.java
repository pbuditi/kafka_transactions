/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package schema;  
@SuppressWarnings("all")
/** Perforce change */
@org.apache.avro.specific.AvroGenerated
public class Change extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Change\",\"namespace\":\"schema\",\"doc\":\"Perforce change\",\"fields\":[{\"name\":\"change\",\"type\":\"int\",\"doc\":\"The change number\"},{\"name\":\"date\",\"type\":\"long\",\"doc\":\"Timestamp of the change\"},{\"name\":\"user\",\"type\":\"string\",\"doc\":\"The user who created the change\"},{\"name\":\"client\",\"type\":\"string\",\"doc\":\"The client workspace where the change was submitted\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The change number */
  @Deprecated public int change;
  /** Timestamp of the change */
  @Deprecated public long date;
  /** The user who created the change */
  @Deprecated public java.lang.CharSequence user;
  /** The client workspace where the change was submitted */
  @Deprecated public java.lang.CharSequence client;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Change() {}

  /**
   * All-args constructor.
   */
  public Change(java.lang.Integer change, java.lang.Long date, java.lang.CharSequence user, java.lang.CharSequence client) {
    this.change = change;
    this.date = date;
    this.user = user;
    this.client = client;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return change;
    case 1: return date;
    case 2: return user;
    case 3: return client;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: change = (java.lang.Integer)value$; break;
    case 1: date = (java.lang.Long)value$; break;
    case 2: user = (java.lang.CharSequence)value$; break;
    case 3: client = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'change' field.
   * The change number   */
  public java.lang.Integer getChange() {
    return change;
  }

  /**
   * Sets the value of the 'change' field.
   * The change number   * @param value the value to set.
   */
  public void setChange(java.lang.Integer value) {
    this.change = value;
  }

  /**
   * Gets the value of the 'date' field.
   * Timestamp of the change   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * Timestamp of the change   * @param value the value to set.
   */
  public void setDate(java.lang.Long value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'user' field.
   * The user who created the change   */
  public java.lang.CharSequence getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * The user who created the change   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'client' field.
   * The client workspace where the change was submitted   */
  public java.lang.CharSequence getClient() {
    return client;
  }

  /**
   * Sets the value of the 'client' field.
   * The client workspace where the change was submitted   * @param value the value to set.
   */
  public void setClient(java.lang.CharSequence value) {
    this.client = value;
  }

  /** Creates a new Change RecordBuilder */
  public static schema.Change.Builder newBuilder() {
    return new schema.Change.Builder();
  }
  
  /** Creates a new Change RecordBuilder by copying an existing Builder */
  public static schema.Change.Builder newBuilder(schema.Change.Builder other) {
    return new schema.Change.Builder(other);
  }
  
  /** Creates a new Change RecordBuilder by copying an existing Change instance */
  public static schema.Change.Builder newBuilder(schema.Change other) {
    return new schema.Change.Builder(other);
  }
  
  /**
   * RecordBuilder for Change instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Change>
    implements org.apache.avro.data.RecordBuilder<Change> {

    private int change;
    private long date;
    private java.lang.CharSequence user;
    private java.lang.CharSequence client;

    /** Creates a new Builder */
    private Builder() {
      super(schema.Change.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(schema.Change.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.change)) {
        this.change = data().deepCopy(fields()[0].schema(), other.change);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.client)) {
        this.client = data().deepCopy(fields()[3].schema(), other.client);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Change instance */
    private Builder(schema.Change other) {
            super(schema.Change.SCHEMA$);
      if (isValidValue(fields()[0], other.change)) {
        this.change = data().deepCopy(fields()[0].schema(), other.change);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.client)) {
        this.client = data().deepCopy(fields()[3].schema(), other.client);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'change' field */
    public java.lang.Integer getChange() {
      return change;
    }
    
    /** Sets the value of the 'change' field */
    public schema.Change.Builder setChange(int value) {
      validate(fields()[0], value);
      this.change = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'change' field has been set */
    public boolean hasChange() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'change' field */
    public schema.Change.Builder clearChange() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'date' field */
    public java.lang.Long getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public schema.Change.Builder setDate(long value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'date' field */
    public schema.Change.Builder clearDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'user' field */
    public java.lang.CharSequence getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public schema.Change.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.user = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'user' field */
    public schema.Change.Builder clearUser() {
      user = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'client' field */
    public java.lang.CharSequence getClient() {
      return client;
    }
    
    /** Sets the value of the 'client' field */
    public schema.Change.Builder setClient(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.client = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'client' field has been set */
    public boolean hasClient() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'client' field */
    public schema.Change.Builder clearClient() {
      client = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Change build() {
      try {
        Change record = new Change();
        record.change = fieldSetFlags()[0] ? this.change : (java.lang.Integer) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.Long) defaultValue(fields()[1]);
        record.user = fieldSetFlags()[2] ? this.user : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.client = fieldSetFlags()[3] ? this.client : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
