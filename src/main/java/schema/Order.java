/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package schema;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"schema\",\"fields\":[{\"name\":\"orderId\",\"type\":\"int\",\"doc\":\"Identifier for reference\"},{\"name\":\"date\",\"type\":\"long\",\"doc\":\"UNIX epoch time in seconds\"},{\"name\":\"customerId\",\"type\":\"string\",\"doc\":\"Customer id for the order\"}],\"doc:\":\"Order Header\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Identifier for reference */
  @Deprecated public int orderId;
  /** UNIX epoch time in seconds */
  @Deprecated public long date;
  /** Customer id for the order */
  @Deprecated public java.lang.CharSequence customerId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Order() {}

  /**
   * All-args constructor.
   */
  public Order(java.lang.Integer orderId, java.lang.Long date, java.lang.CharSequence customerId) {
    this.orderId = orderId;
    this.date = date;
    this.customerId = customerId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return date;
    case 2: return customerId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.Integer)value$; break;
    case 1: date = (java.lang.Long)value$; break;
    case 2: customerId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * Identifier for reference   */
  public java.lang.Integer getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * Identifier for reference   * @param value the value to set.
   */
  public void setOrderId(java.lang.Integer value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'date' field.
   * UNIX epoch time in seconds   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * UNIX epoch time in seconds   * @param value the value to set.
   */
  public void setDate(java.lang.Long value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * Customer id for the order   */
  public java.lang.CharSequence getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * Customer id for the order   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customerId = value;
  }

  /** Creates a new Order RecordBuilder */
  public static schema.Order.Builder newBuilder() {
    return new schema.Order.Builder();
  }
  
  /** Creates a new Order RecordBuilder by copying an existing Builder */
  public static schema.Order.Builder newBuilder(schema.Order.Builder other) {
    return new schema.Order.Builder(other);
  }
  
  /** Creates a new Order RecordBuilder by copying an existing Order instance */
  public static schema.Order.Builder newBuilder(schema.Order other) {
    return new schema.Order.Builder(other);
  }
  
  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private int orderId;
    private long date;
    private java.lang.CharSequence customerId;

    /** Creates a new Builder */
    private Builder() {
      super(schema.Order.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(schema.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Order instance */
    private Builder(schema.Order other) {
            super(schema.Order.SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'orderId' field */
    public java.lang.Integer getOrderId() {
      return orderId;
    }
    
    /** Sets the value of the 'orderId' field */
    public schema.Order.Builder setOrderId(int value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'orderId' field has been set */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'orderId' field */
    public schema.Order.Builder clearOrderId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'date' field */
    public java.lang.Long getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public schema.Order.Builder setDate(long value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'date' field */
    public schema.Order.Builder clearDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'customerId' field */
    public java.lang.CharSequence getCustomerId() {
      return customerId;
    }
    
    /** Sets the value of the 'customerId' field */
    public schema.Order.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.customerId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'customerId' field has been set */
    public boolean hasCustomerId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'customerId' field */
    public schema.Order.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Order build() {
      try {
        Order record = new Order();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.Integer) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.Long) defaultValue(fields()[1]);
        record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
